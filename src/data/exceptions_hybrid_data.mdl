  include ..\model\lists
  


#---------------------------------------MTEP

verif_PhiY[ce] := 0

verif_PhiY_ef_tot[ce] := 0

PhiY_ef_tot[ce, se] := Q_Mtep_ef_tot[ce,se]/Q_Mtep_ef_tot_SOU[ce]

PhiY_indus[ce,se] :=0

@over PhiY_indus[21,21] := 1

@over PhiY_indus[22,2201] := 1

@over PhiY_indus[24,2401] := 1

Q_Mtep_ef_tot_SOU[ce] := sum(Q_Mtep_ef_tot[ce,se] on se)

#PhiY_ener[ce, se] := Q_Mtep_ef[ce,se] / Q_Mtep_ef_SOU[ce]   

Q_Mtep_ef_SOU[ce] := Q_Mtep_H_BUIL[ce] + Q_Mtep_H_AUTO[ce] + Q_Mtep_SEC_SOU[ce]

Q_Mtep_X_SOU[ce] := sum(Q_Mtep_X[ce,se] on se)

coef_int[ce,se] := Q_Mtep_int[ce,se]/(Q_Mtep_ef[ce,se]+Q_Mtep_X[ce,se]) if Q_Mtep_int[ce,se] <> 0

coef_Losses[ce,se] := Q_Mtep_Losses[ce,se]/(Q_Mtep_ef[ce,se]+Q_Mtep_X[ce,se]) if Q_Mtep_Losses[ce,se] <> 0

Q_Mtep_ef_tot[ce,se] := Q_Mtep_ef[ce,se] + Q_Mtep_X[ce,se] + Q_Mtep_Nener[ce,se]

Q_Mtep_ep[ce,se] := Q_Mtep_ef[ce,se] + Q_Mtep_X[ce,se] + Q_Mtep_int[ce,se] + Q_Mtep_Losses[ce,se]

Q_Mtep_|V|[se] := sum(Q_Mtep_|V|[ce,se] on ce) where V in ep ef X int Losses indus ef_tot

Q_Mtep_indus[ce] := sum(Q_Mtep_indus[ce,sne] on sne) 

Q_Mtep_|V| := sum(Q_Mtep_|V|[se] on se) where V in ep ef X int Losses indus ef_tot

verif_Q_Mtep_ep := 0

verif_Q_Mtep_ef_SOU[ce] := 0

verif_Q_Mtep_X_SOU[ce] := 0

#-------------------------------------BUILDING 

EXP_BUIL[h, ecl] := sum(EXP_BUIL[h, ecl, ce] on ce)                                   

EXP_BUIL[h, ce] :=  sum(EXP_BUIL[h, ecl, ce] on ecl)      
                   
tau_REHAB_trend[h, ecl] := tau_REHAB[h, ecl]

tau_REHAB_N[h, ecl] := tau_REHAB[h, ecl]

tau_REHAB_2[h, ecl] := tau_REHAB[h, ecl]

delta_BUIL[h, ecl] := sum(delta_BUIL[h, ecl, bcl] on bcl)          

delta_REHAB[h, ecl] := sum(phi_REHAB[h, ecl, ecl2] * delta_BUIL[h, ecl2] on ecl2)

@pv ENER_BUIL[h, ecl] := sum(ENER_BUIL[h, ecl, ce] if ENER_BUIL[h, ecl, ce] <> 0 on ce)

@pv ENER_BUIL[h] := sum(ENER_BUIL[h, ecl] on ecl)

@pv ENER_BUIL := sum(ENER_BUIL[h] on h)

@pv ENER_BUIL[h, ce] := sum(ENER_BUIL[h, ecl, ce] if ENER_BUIL[h, ecl, ce] <> 0 on ecl)

@pv ENER_BUIL[ce] := sum(ENER_BUIL[h, ce] on h)
  
@pv EXP_BUIL[h] := sum(EXP_BUIL[h, ecl] on ecl)

PENER_m2[h, ecl] := PENER_BUIL[h, ecl] * ENER_BUIL[h, ecl] / BUIL[h, ecl]

PENER_m2_e[h, ecl] := PENER_m2[h, ecl]

UC_E[h, ecl] := PENER_m2[h, ecl] * ( ((1 + GR_PENER_m2_e[h, ecl]) ^ BUIL_D[h, ecl] - 1) / (GR_PENER_m2_e[h, ecl] * BUIL_D[h, ecl]) )

sum_phi_REHAB[h, ecl] := 1

verif_phi_REHAB[h, ecl] := 0

UC_E_REHAB[h, ecl] := sum(phi_REHAB[h, ecl, ecl2] * UC_E[h, ecl2] on ecl2)

PREHAB[h, ecl] := if(REHAB[h, ecl] <> 0, (sum((1 - R_SUB[h,ecl,ecl2])*PREHAB[h, ecl, ecl2] * REHAB[h, ecl, ecl2] on ecl2)) / REHAB[h, ecl], P)

@pv REHAB[h] := sum(REHAB[h, ecl] if REHAB[h, ecl] <> 0 on ecl)

@pv REHAB := sum(REHAB[h] on h)

PNEWBUIL[h]*NEWBUIL[h] := sum(PNEWBUIL[h, ecl]*NEWBUIL[h, ecl] if NEWBUIL[h, ecl] <> 0 on ecl)

@pv NEWBUIL := sum(NEWBUIL[h] on h)

PREHAB_delta[h, ecl] * REHAB[h, ecl] := sum( (1 - R_SUB[h, ecl, ecl2]) * _
 		       		       	     PREHAB[h, ecl, ecl2] * REHAB[h, ecl, ecl2] / REHAB_D[h, ecl2] on ecl2) _
					if REHAB[h, ecl] <> 0
  
R_LOAN_REHAB[h, ecl] := 1 - R_CASH_REHAB[h, ecl]

R_LOAN_NewBUIL[h, ecl] := 1 - R_CASH_NewBUIL[h, ecl]

LD_NewBUIL[h, ecl] := HOUSEHOLD_HYBRID_BUIL(252 + $ecl, $h)

UC_K_REHAB[h, ecl] := PREHAB_delta[h, ecl] * _
	              (R_CASH_REHAB[h, ecl] + _
                       R_LOAN_REHAB[h, ecl] * R_I_REHAB[h, ecl]{-1} * _
		       		              LD_REHAB[h, ecl] / (1 - (1 + R_I_REHAB[h, ecl]{-1}) ^ (-LD_REHAB[h, ecl]))) _
		      if REHAB[h, ecl] <> 0

UC_REHAB[h, ecl] := UC_K_REHAB[h, ecl] + UC_E_REHAB[h, ecl] if REHAB[h, ecl] <> 0

R_LOAN[h, ecl] := 1 - R_CASH[h, ecl]

UC_K[h, ecl] := PREHAB[h, ecl, ecl] / BUIL_D[h, ecl] * _
	         (R_CASH[h, ecl] + R_LOAN[h, ecl] * R_I_BUIL[h, ecl]{-1} * LD[h, ecl] / (1 - (1 + R_I_BUIL[h, ecl]{-1}) ^ (-LD[h, ecl])))

UC[h, ecl] := UC_K[h, ecl] + UC_E[h, ecl]

Payback_REHAB_r[h, ecl] := (UC_K_REHAB[h, ecl] * BUIL_D[h, ecl] - UC_K[h, ecl] * BUIL_D[h, ecl]) / _
		         (UC_E[h, ecl] - UC_E_REHAB[h, ecl]) - 1 if REHAB[h, ecl] <> 0

Payback_REHAB[h, ecl] := Payback_REHAB_r[h, ecl] if REHAB[h, ecl] <> 0

#-----------------------------------------------ajout Gaël-------------------------------

phi_REHAB_n[h,ecl,ecl2] := phi_REHAB[h,ecl,ecl2]

phi_REHAB_des_n[h,ecl,ecl2] :=  phi_REHAB[h,ecl,ecl2]

U_REHAB[h,ecl,ecl2] := (UC_E[h,ecl]{-1} - UC_E[h,ecl2]{-1}) - ((1 - R_SUB[h,ecl,ecl2]{-1}) * PREHAB[h,ecl,ecl2]{-1})   if REHAB[h,ecl,ecl2] <> 0

EXP_U_REHAB[h,ecl,ecl2] := EXP(U_REHAB[h,ecl,ecl2]*6000)   if REHAB[h,ecl,ecl2] <> 0

SUM_EXP_U_REHAB[h,ecl] := sum(EXP_U_REHAB[h,ecl,ecl2] if REHAB[h,ecl,ecl2] <> 0 on ecl2)    if REHAB[h,ecl] <> 0
 
SUM_phi_REHAB_n[h,ecl] := sum(phi_REHAB_n[h,ecl,ecl2] if REHAB[h,ecl,ecl2] <> 0 on ecl2)   if REHAB[h,ecl] <> 0

#U_REHAB[h,ecl,ecl2] := 1000000*((UC_E[h,ecl]{-1} - UC_E[h,ecl2]{-1}) - ((1 - R_SUB[h,ecl,ecl2]{-1}) * PREHAB[h,ecl,ecl2]{-1}))   if REHAB[h,ecl,ecl2] <> 0
#
#SUM_U_REHAB[h,ecl] := sum(U_REHAB[h,ecl,ecl2]^(-1) if REHAB[h,ecl,ecl2] <> 0 on ecl2)    if REHAB[h,ecl] <> 0
#
#SUM_phi_REHAB_n[h,ecl] := (sum(phi_REHAB_n[h,ecl,ecl2] if REHAB[h,ecl,ecl2] <> 0 on ecl2))   if REHAB[h,ecl] <> 0

#---------------------------------------------------------------------

R_RMBS_NewBUIL[h, ecl] := 1 / LD_NewBUIL[h, ecl]

R_RMBS_REHAB[h, ecl] := if(REHAB[h, ecl] <> 0, 1 / LD_REHAB[h, ecl], 1)

DEBT_REHAB_Val[h, ecl] := @elem(R_LOAN_REHAB[h, ecl] * (1 + STEADYSTATE(1,1)) / _
		                (STEADYSTATE(1,1) + R_RMBS_REHAB[h, ecl]) * PREHAB[h, ecl] * REHAB[h, ecl], %baseyear) * _
		          (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)

DEBT_NewB_Val[h, ecl] := @elem(R_LOAN_NewBUIL[h, ecl] * (1 + STEADYSTATE(1, 1)) / _
 		     	       (STEADYSTATE(1, 1) + R_RMBS_NewBUIL[h, ecl]) * PNewBUIL[h, ecl] * NewBUIL[h, ecl], %baseyear) * _
			  (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)

EXP_HOUSING_Val[h, ecl] := @elem(DEBT_REHAB_Val[h, ecl]{-1} * (R_I_REHAB[h, ecl]{-1} + R_RMBS_REHAB[h, ecl]{-1}) + _
      	       	   	         R_CASH_REHAB[h, ecl] * PREHAB[h, ecl] * REHAB[h, ecl] + _
	       			 DEBT_NewB_Val[h, ecl]{-1} * (R_I_NewBUIL[h, ecl]{-1} + R_RMBS_NewBUIL[h, ecl]{-1}) + _
	       			 R_CASH_NewBUIL[h, ecl] * PNewBUIL[h, ecl] * NewBUIL[h, ecl] + _
	       			 PENER_BUIL[h, ecl] * ENER_BUIL[h, ecl], %baseyear) * _
	                   (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)

EXP_HOUSING_VAL[h] := sum(EXP_HOUSING_VAL[h, ecl] on ecl)

EXP_HOUSING_VAL := sum(EXP_HOUSING_VAL[h] on h)

EXP_REHAB_VAL[h] := PREHAB[h] * REHAB[h]

EXP_REHAB_VAL := sum(EXP_REHAB_VAL[h] on h)

EXP_NEWBUIL_VAL[h] := PNEWBUIL[h] * NEWBUIL[h]

EXP_NEWBUIL_VAL := sum(EXP_NEWBUIL_VAL[h] on h)

phi_exp_13bis[h] := (EXP_NEWBUIL_VAL[h] + EXP_REHAB_VAL[h]) / (EXP_NEWBUIL_VAL + EXP_REHAB_VAL)

EXP_13_OTH_VAL := @elem(PEXP_13 * EXP_13 - (PNEWBUIL * NEWBUIL + PREHAB * REHAB), %baseyear) * (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)

EXP_13_OTH_Val[h] := phi_exp_13bis[h] * EXP_13_OTH_VAL

#EXP_13[h] := @elem(PNewBUIL[h] * NewBUIL[h] + PREHAB[h] * REHAB[h] +  EXP_13_OTH_val[h] / PCH_13, %baseyear) * (1 + STEADYSTATE(2, 1)) ^ (@year - %baseyear)

EXP_13[h] := CHD_13 - SUB_REHAB_VAL

# Subvention pour les logements (CIDD)

SUB_REHAB_VAL[h, ecl] := sum(R_SUB[h,ecl,ecl2] * PREHAB[h,ecl,ecl2] * REHAB[h,ecl,ecl2])

SUB_REHAB_VAL[h]:= sum(SUB_REHAB_VAL[h, ecl]  on ecl)

SUB_REHAB_VAL := sum(SUB_REHAB_VAL[h] on h)

EXP_ENER[h] := sum(EXP[ce, h] on ce)

PEXP_ENER[h]*EXP_ENER[h] := sum(PEXP[ce,h]*EXP[ce, h] on ce)         # corrigé


# sobriété, reglementation thermique, substitution interénergie dans logement

PEXP_BUIL[h, ecl]:= P

eta_BUIL := 0.2

SUBST_BUIL[h, ecl, ce] := 0

PROG_E_indus[s] := 1

## ------------------------------------------------------------------------------Automobile

EXP_AUTO[h, ecl] := sum(EXP_AUTO[h, ecl, ce] on ce)             

EXP_AUTO[h, ce] := sum(EXP_AUTO[h, ecl, ce] on ecl)              

EXP_AUTO[h] := sum(EXP_AUTO[h, ecl] on ecl)
                                                            
PEXP_AUTO[h, ecl] := P                                       

PEXP[ce,h] := P              # corrigé                     

PEXP_AUTO[h] := P                                       

PEXP_AUTO := P                                         

EXP_AUTO[ecl, ce] := sum(EXP_AUTO[h, ecl, ce] on h)       

EXP_AUTO[ce] := sum(EXP_AUTO[ecl, ce] on ecl)            

EXP_AUTO := sum(EXP_AUTO[h] on h) 

AUTO[h] := sum(AUTO[h, ecl] on ecl)  

AUTO_N := AUTO[h]                                                     #modifié     AUTO[h] := HOUSEHOLD_HYBRID_AUTO(40, $h)                     

AUTO[h, DES] := sum(delta_AUTO[h, ecl, DES] * AUTO[h, ecl]{-1} on ecl)

AUTO_DES := AUTO[h,DES]

AUTO[ecl] := sum(AUTO[h, ecl] on h)                                           

AUTO := sum(AUTO[ecl] on ecl)   

AUTO_elec:= sum(AUTO_elec[h] on h) 

KM_AUTO_th[h,ecl] := KM_AUTO[h,ecl,21] + KM_AUTO[h,ecl,22] + KM_AUTO[h,ecl,24]

KM_AUTO_th[h] := sum(KM_AUTO_th[h,ecl] on ecl)   

AUTO_th[h] :=  sum(AUTO_th[h,ecl]  on ecl) 

AUTO_th :=  sum(AUTO_th[h]  on h)    

DEBT_AUTO_VAL[h, ecl] := @elem(R_LOAN_AUTO[h, ecl] * (1 + STEADYSTATE(1, 1)) / _
		      	       (STEADYSTATE(1 , 1) + R_RMBS_AUTO[h, ecl]) * PNewAUTO[h, ecl] * NewAUTO[h, ecl] * (1 - R_SUB_AUTO[h, ecl]), %baseyear) * _
			  (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)

EXP_MOBAUTO_Val[h, ecl] := @elem(DEBT_AUTO_Val[h, ecl]{-1} * (R_I_AUTO[h, ecl]{-1} + R_RMBS_AUTO[h, ecl]{-1}) + _
		   	         R_CASH_AUTO[h, ecl] * PNewAUTO[h, ecl] * NewAUTO[h, ecl] * (1 - R_SUB_AUTO[h, ecl]) + _
				 PEXP_AUTO[h, ecl] * EXP_AUTO[h, ecl], %baseyear) *_
   			   (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)

EXP_NEWAUTO_VAL[h, ecl] := PNewAUTO[h, ecl] * NewAUTO[h, ecl]



AUTO_verif[h] := sum( AUTO[h,ecl] on ecl )

AUTO_verif := sum( AUTO_verif[h] on h )

Verif_AUTO := 0

Verif_AUTO2 := 0

Verif_AUTO_DES := 0

#@pv NewAUTO[h] := sum(NewAUTO[h, ecl] if NewAUTO[h, ecl] <> 0 on ecl)

@pv NewAUTO := sum(NewAUTO[h] on h)

EXP_NEWAUTO_VAL[h] := sum(EXP_NEWAUTO_VAL[h, ecl] on ecl)

EXP_NEWAUTO_VAL := sum(EXP_NEWAUTO_VAL[h] on h)

ENER[h, ecl] := @elem(PENER_BUIL[h, ecl], %baseyear) * ENER_BUIL[h, ecl] + EXP_AUTO[h, ecl]

PENER[h, ecl] := P

ENER[h] := @elem(PENER_BUIL[h], %baseyear) * ENER_BUIL[h] + EXP_AUTO[h]

PENER[h] := P

ENER := @elem(PENER_BUIL, %baseyear) * ENER_BUIL +EXP_AUTO

PENER := P

PENER_AUTO[h, ecl] * KM_AUTO[h, ecl] := PEXP_AUTO[h, ecl] * EXP_AUTO[h, ecl] if AUTO[h, ecl] <> 0

AUTO[h,ecl,ce]:= AUTO[h,ecl]*SHARE_AUTO[h, ecl, ce] 

AUTO_th[h,ce2] :=  sum(AUTO_th[h,ecl,ce2] on ecl)

AUTO[ce] := sum(AUTO[h,ce] on h)

R_SUB_AUTO[h, ecl, ce] := 0   #à retirer

SUB_AUTO_VAL[h,ecl] := R_SUB_AUTO[h, ecl]*PNewAUTO[h, ecl] * NewAUTO[h, ecl]

SUB_AUTO_VAL[h] := sum(SUB_AUTO_VAL[h,ecl] on ecl)

SUB_AUTO_VAL := sum(SUB_AUTO_VAL[h] on h)

# Aspect sobriété et efficacité énérgetique dans l'automobile

PROG_AUTO := 1

eta_AUTO := 0.1

#modal transfert

modal_shift_freight := 0


#km moyen parcouru par vehicule

KmPerAuto[h] := @elem(Km_AUTO[h]/Auto[h],%baseyear)

TravPerAuto[h] := Km_auto[h]/(Auto[h] * kmPerAuto[h]) 	

GR_KmPerAuto := 0

km_auto_CD[h] := KM_AUTO[h] - km_auto_LD[h]

km_trav_auto_LD[h] := (km_traveler_LD[h]-km_traveler_14[h])            # modifié Hervé

km_trav_auto_CD[h] := km_traveler_CD[h]-km_traveler_15[h]              # modifié Hervé

##### Nombre de voyageurs par auto : (covoiturage)

travperauto_CD[h] := 1.4 

travperauto_LD[h] := 2.2

## Coût du transport nouveau : 

#p_mobauto_val[h] := (0.184754355)*(1 + STEADYSTATE(15, 1)) ^ (@year - %baseyear) #coût kilométrique carburant + entretien (ça colle à peu près au théma : prix 2012 convertis en euros 2006)

p_mobauto_val[h] := exp_mobauto_val*1000/km_auto[h]

PC_trav_auto_LD[h] := p_mobauto_val[h]/travperauto_LD[h]

PC_trav_auto_CD[h] := p_mobauto_val[h]/travperauto_CD[h]


##Pener: attention fois 1000
#Le coût du carburant au kilomètre est de 9.5 cts 2012 (équivalent à 8.6 cts 2006), l'ordre de grandeur dans la valeur en dur paraît mauvais. Chiffre indicatif puisqu'il ne sert dans aucune équation...

Pener_auto[h] := (sum(pener_auto[h, ecl]*km_auto[h, ecl] on ecl))/(KM_AUTO[h])*1000


##### initialisation prix des transports en commun 

 PC_trav_14[h]*km_traveler_14[h] := pch_14*ch_14

PC_trav_15[h]*km_traveler_15[h] := pch_15*ch_15


######################### Initialisation des valeurs des autos 


sobre_AUTO := 1

trend_km_traveler_CD := 0.02

trend_km_traveler_LD := 0.04


R_SUB_AUTO_elec[h,pcl]:= 0

R_SUB_AUTO_elec[h]:= 0

R_SUB_AUTO_th[h] := 0

R_SUB_AUTO_th[h,ecl] := 0

Bonus_th[h,ecl] := 0

R_SUB_AUTO[h,ecl] := 0

R_SUB_AUTO[h] := R_SUB_AUTO_th[h]*(1-share_elec[h]) + R_SUB_AUTO_elec[h]*share_elec[h]

share_elec :=  share_elec[h]

share_th[h]:=1-share_elec[h]





# Dans cette exception, nous allons redéfinir le parc auto en ajoutant une spécification spéciale pour les véhicules électriques.
# L'idée est d'effectuer un choix de véhicules en deux étapes : 1 : choix entre électrique et thermique, 2 : choix de la classe d'énergie fct des gCO2/km pour le thermique ou d'une classe de prix correspondantes pour l'élec.


#AUTOS ELECTRIQUES

KM_AUTO_elec[h,pcl] := phi_elec[h,pcl]*KM_AUTO[h,CA,23]

KM_AUTO_elec[h]:= sum(KM_AUTO_elec[h,pcl] on pcl)

KM_AUTO_elec := sum(KM_AUTO_elec[h] on h) 

NewAUTO_elec[h] := NewAUTO[h]*share_elec[h]

NewAUTO_th[h] := NewAUTO[h]*(1-share_elec[h])

NewAUTO_elec[h,pcl] := NewAUTO_elec[h]*phi_elec[h,pcl]

NewAUTO_th[h, ecl] := NewAUTO_th[h]*phi_th[h,ecl]
  
CONSO_AUTO_elec[h,pcl] := @elem(phi_AUTO_elec[h,pcl]* EXP_AUTO[h,CA,23]/KM_AUTO_elec[h,pcl],%baseyear)  #hypothese contestable : l'arbitrage dépend des consos du stock et non des ventes.

phi_AUTO_elec[h,pcl]*AUTO_elec[h] := AUTO_elec[h,pcl]

EXP_AUTO_elec[h,pcl] := KM_AUTO_elec[h,pcl]/KM_AUTO_elec[h]* EXP_AUTO[h,CA,23]

prog_auto_elec :=1

PAUTO_elec[h] * NewAUTO_elec[h] := sum(PAUTO_elec[h,pcl]*NewAUTO_elec[h,pcl] on pcl)

PNewAUTO[h,CA]*NewAUTO[h,CA] := PAUTO_elec[h]*NewAUTO_elec[h] + PNewAUTO_th[h,CA]*NewAUTO_th[h,CA]

PNewAUTO[h,c] := @elem(PNewAUTO_th[h,c],%baseyear) * (1 + STEADYSTATE(15, 1)) ^ (@year - %baseyear)   where c in %list_ener_class \ CA

PNewAUTO_th[h] * NewAUTO_th[h] := sum(PNewAUTO_th[h, ecl] * NewAUTO_th[h, ecl] on ecl)    

PnewAUTO[h] * NewAUTO[h] := PAUTO_elec[h]*NewAUTO_elec[h] + PNewAUTO_th[h]*NewAUTO_th[h] 
 
PENER_AUTOelec[h,pcl] :=  (AUTO_elec[h,pcl]>0) * @elem(pch[23] *EXP_AUTO_elec[h,pcl] / AUTO_elec[h,pcl], %baseyear)* (1 + STEADYSTATE(15, 1)) ^ (@year - %baseyear)   

UC_E_auto_elec[h,pcl]:= PENER_autoelec[h,pcl] #*((1+dlog(PCH))^(AUTO_elec_D[h,pcl])-1)/(dlog(PCH)*AUTO_elec_D[h,pcl])
 
UC_K_auto_elec[h,pcl] := ((PAUTO_elec[h,pcl]) / AUTO_elec_D[h,pcl] ) * ( 1 - R_SUB_AUTO_elec[h,pcl] ) * (  R_CASH_AUTO_elec[h,pcl] +      _
      R_LOAN_AUTO_elec[h,pcl] * R_I_AUTO_elec[h,pcl]{-1} * LD_AUTO_elec[h,pcl] / ( 1 - ( 1 + R_I_AUTO_elec[h,pcl]{-1} )^( - LD_AUTO_elec[h,pcl] ) ) )
      
UC_M_auto_elec[h] := @elem((HOUSEHOLD_HYBRID_AUTO(218,1)/100*km_auto[h]/auto[h])/1000,%baseyear)*(1 + STEADYSTATE(15, 1))^ (@year - %baseyear)

UC_auto_elec[h]:= sum(phi_elec[h,pcl]* (UC_K_auto_elec[h,pcl] + UC_E_auto_elec[h,pcl]) on pcl) + UC_M_auto_elec[h]

#AUTOS THERMIQUES


PENER_AUTO_th[h,ecl] * AUTO_th[h,ecl] := pch[22] * EXP_AUTO[h,ecl,22] + pch[24] * EXP_AUTO[h,ecl,24] 
 
UC_E_auto_th[h,ecl] := PENER_auto_th[h,ecl] #*(1+dlog(PCH))^(AUTO_D[h,ecl]) - 1 ) / ( dlog(PCH)*AUTO_D[h,ecl] ) 
		
UC_K_auto_th[h,ecl] := ((Pnewauto_th[h,ecl]) / AUTO_D[h,ecl] ) * ( 1 - R_SUB_AUTO_th[h,ecl] ) * (  R_CASH_AUTO[h,ecl] +      _
      R_LOAN_AUTO[h,ecl] * R_I_AUTO[h,ecl]{-1} * LD_AUTO[h,ecl] / ( 1 - ( 1 + R_I_AUTO[h,ecl]{-1} )^( - LD_AUTO[h,ecl] ) ) )
     							
UC_M_auto_th[h]:= @elem((HOUSEHOLD_HYBRID_AUTO(219,1)/100*km_auto_th[h]/(auto[h]-auto_elec[h]))/1000,%baseyear)*(1 + STEADYSTATE(15, 1))^ (@year - %baseyear)

UC_auto_th[h]:=(sum(phi_th[h,ecl] * (UC_K_auto_th[h,ecl] + UC_E_auto_th[h,ecl]) on ecl) + UC_M_auto_th[h])

U_auto_th[h,ecl] :=-0.76*UC_K_auto_th[h,ecl]-0.2*UC_E_auto_th[h,ecl] 

@over phiparcauto_elec[h]:=auto_elec[h]/auto[h]

imitation[h] :=  coeffBassimit[h] 

innovation[h] := coeffBassinnov[h] 

nu_diffusion := HOUSEHOLD_HYBRID_AUTO(216,1)

coef_phiNVE := 1

COeffBassinnov[h] := 0

ES_BASS := 0

CoeffBassimit[h] := 0

phiNVE[h]:=share_elec[h]

phi_elec_n[h,pcl] := phi_elec[h,pcl]

phi_elec_e[h,pcl] := phi_elec[h,pcl]

phi_th_n[h,ecl]:=phi_th[h,ecl]

phi_th_e[h,ecl]:=phi_th[h,ecl]

phi_elec_n_tot[h] := 1

phi_th_n_tot[h] := 1

U_auto_elec[h,pcl] :=-0.76*UC_K_auto_elec[h,pcl]-0.2*UC_E_auto_elec[h,pcl]

U_auto_elec[h] * @elem(NewAUTO_elec[h],%baseyear) := sum(U_auto_elec[h,pcl] * @elem(NewAUTO_elec[h,pcl],%baseyear) on pcl)

U_auto_th[h] * @elem(NewAUTO_th[h],%baseyear) := sum(U_auto_th[h,ecl] * @elem(NewAUTO_th[h,ecl],%baseyear) on ecl)

                       

# Overall price signals

PE_Signal[s] := 0

PE_signal_trsp := 0
 
PE_Signal_sinc := 0


# Price signals by sector for each fuel

PE_Signal[ce, s] := 0
PE_signal_21_sinc := 0
PE_signal_22_sinc := 0
PE_signal_22_ster := 0
PE_signal_22_trsp := 0

PE_signal_23_sinc :=0
PE_signal_23_ster := 0
PE_signal_23_trsp := 0

PE_signal_24_sinc := 0
PE_signal_24_ster := 0
PE_signal_24_trsp := 0

#Calibration Labour productivity by sectors

GR_PROG_L := STEADYSTATE(4,1)

GR_PROG_L[s] := GR_PROG_L

PE_signal_ETS :=0

SUBST_K_E_n[s] := 0

SUBST_K_E[s] := 0
 
Xexo[cm] :=  X[cm]

QDexo[cm] :=  QD[cm]

QMexo[cm] :=  QM[cm]

MATexo[s] := MAT[s]

IAexo[s] := IA[s]

EXPexo[cm] := EXP[cm]

CI[c,s]  := CID[c,s] + CIM[c,s]

CI[c]  := CIM[c]+CID[c]

CIexo[cm]  := CIM[cm]+CID[cm]

CIexo[cm,sne]  := CI[cm,sne]
 
CIDexo[cm,sne]  := CID[cm,sne]             
   
CIMexo[cm,sne]  := CIM[cm,sne]

Iexo[cm]  := I[cm]

ID[c,s]  := IAD[c,s]     
    
IM[c,s]  := IAM[c,s]     

DSexo[cm]  := DS[cm]

DSMexo[cm] :=DSM[cm]

DSDexo[cm] := DSD[cm]
 
NewAUTOexo := NewAUTO[h]

NewBUILexo := NewBUIL[h]

EXPGexo[cm] := EXPG[cm]

EXPothexo_03 := EXP_03_OTH_VAL[h]

EXPothexo_13 := EXP_13_OTH_VAL[h]

AUTOexo := AUTO[h]

phi_exp_03bis[h] := EXP_NEWAUTO_VAL[h] / EXP_NEWAUTO_VAL

EXP_03_OTH_VAL := (household(5,1) - @elem(sum(PAUTO_elec[h,pcl]* NewAUTO_elec[h,pcl] on pcl)+ sum(PNewAUTO_th[h,ecl]* NewAUTO_th[h,ecl] on ecl),%baseyear)) * (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)
  
EXP_MOBAUTO_VAL[h] := sum(EXP_MOBAUTO_VAL[h, ecl] on ecl)
  
EXP_MOB_OTH_Val[h] := sum(PEXP[trav, h] * EXP[trav, h] on trav)
  
EXP_03_OTH_VAL[h] := phi_exp_03bis[h] * EXP_03_OTH_VAL
  
EXP_MOB_Val[h] := EXP_MOBAuto_Val[h] + EXP_MOB_OTH_Val[h] + EXP_03_OTH_VAL[h]
  
EXP_HH_VAL[h] := EXP_HOUSING_Val[h] + EXP_MOB_Val[h] + EXP_OTH_Val[h] + EXP_13_OTH_Val[h]

EXP_HH_Val := sum(EXP_HH_VAL[h] on h)

EXP_OTH_Val[h] := sum(PEXP[co, h] * EXP[co, h] on co)

EXP_MOBAUTO_VAL := sum(EXP_MOBAUTO_VAL[h] on h)

Phi_EXP[co, h] := EXP[co, h] / EXP[co] if EXP[co] <> 0

AUTO_elec[h,DES,pcl] := (delta_AUTO[h,CA,DES] * AUTO_elec[h,pcl]{-1})     # à corriger inversion de l'équationauto   d(AUTO_elec[h,pcl]) - NewAUTO_elec[h,pcl] 

#AUTO_elec[h,DES,pcl] :=  d(AUTO_elec[h,pcl]) - NewAUTO_elec[h,pcl]

AUTO_th[h,DES,ecl] := (delta_AUTO[h,ecl,DES] * AUTO_th[h,ecl]{-1})         

AUTO[h,DES,ecl] := (AUTO_th[h,DES,ecl]) 

@over AUTO[h,DES,CA] := (sum(AUTO_elec[h,DES,pcl] on pcl) + AUTO_th[h,DES,CA]) 


# Just for verification

elem := @elem(DISPINC_VAL - EXP_HH_Val, %baseyear)

EMS_SEC_23[sets] :=0

DS_base_trend := sum(DS|O|[c] on c, O in D M)

DS_trend := DS_base_trend

 
IC_HH[22,h] := PhiY_ener[22, 2201]  #modifié Gaël
                                   
IC_HH[24,h] := PhiY_ener[24, 2401]    #modifié Gaël   
  
  # Marginal propensity to save

MPS_HH[h] := @elem((DISPINC_VAL[h] - EXP_HH_Val[h]) / DISPINC_VAL[h], %baseyear)             

S_HH[h] := MPS_HH[h] * DISPINC_VAL[h]

TS_HH[h] := @elem(MPS_HH[h], %baseyear)

S_HH := @elem(DISPINC_VAL - EXP_HH_Val, %baseyear) * (1 + STEADYSTATE(1, 1)) ^ (@year - %baseyear)

TS_HH := @elem(S_HH/DISPINC_VAL, %baseyear)

Stock_S := S_HH * (1 + STEADYSTATE(1, 1)) / STEADYSTATE(1, 1)    #cree une petite pertubation

R_S := @elem(INT_VAL / Stock_S{-1}, %baseyear)

BetaExp[co, h] := @elem((EXP[co, h] * PEXP[co, h] - PEXP[co, h] * NEXP[co, h]) / _
	                (DISPINC_VAL[h] * (1 - MPS_HH[h]) - PNEXP[h] * NEXP[h] - EXP_HOUSING_Val[h] - Exp_13_OTH_VAL[h] - EXP_MOB_Val[h]), %baseyear)   

BetaExp[h] := sum(BetaExp[co, h] on co)

EXP[co] := sum(EXP[co, h] on h)
  
NEXP[h] := sum(NEXP[co, h] on co)

EXP[ce, h] := @elem(PENER_BUIL[h, ce], %baseyear) * ENER_BUIL[h, ce] + EXP_AUTO[h, ce]
  
EXP[ce] := (sum(EXP[ce, h] if EXP[ce, h] <> 0 on h)) 

EXP_e[c, h] := EXP[c, h]

EXP_n[ce] := EXP[ce]

EXP_n[co, h] := (PEXP[co, h] * NEXP[co, h] + BetaExp[co, h] * (DISPINC_VAL[h] * (1 - MPS_HH[h]) - PNEXP[h] * NEXP[h] - EXP_HOUSING_Val[h] - Exp_13_OTH_VAL[h] - EXP_MOB_Val[h])) _
                       / PEXP[co, h]   if EXP[co, h] <> 0
                       
EXP_n[ce,h] := EXP_n[ce]

EXP[h] := sum(EXP[c, h] on c)

EXPH := sum(EXP[h] on h)

S := DISPINC_VAL - PEXPH*EXPH

S[h] := S
    
Carbon_foot := EMS_TOT/1000000 + EMS_M - EMS_X      

EMS_M := sum(EMS_M[c] on c)

EMS_X := sum(EMS_X[c] on c) 

EMS_M[c] := FOOTPRINT(c,1)*M[c]

EMS_X[c] :=  EMS[c]*X[c]/(YQ[c]*1000000)     

EMS[sne] :=  EMS_SEC[sne]/Y[sne]*YQ[sne]   # grossier : on connait les émissions par secteur mais pas par produit

EMS[21] :=  EMS_SEC[21]

EMS[22] :=  sum(EMS_SEC[se22] on se22)

EMS[23] :=  sum(EMS_SEC[se23] on se23)

EMS[24] :=  sum(EMS_SEC[se24] on se24)  

CIEE[s] := 0

PE_signal_sec[s] := 0

DSD_base[c] := SUPPLY_USE_DOM($c,(NELEMSET(1,1)+1)+NELEMSET(5,1)+NELEMSET(7,1)+NELEMSET(1,1)+5) * (1 + STEADYSTATE(2,1)) ^ (@year - %baseyear)

DSM_base[c] := SUPPLY_USE_FOREIGN($c,1+NELEMSET(5,1)+NELEMSET(7,1)+NELEMSET(1,1)+5) * (1 + STEADYSTATE(2,1)) ^ (@year - %baseyear)

Choc_E_oth_des[c,s] :=0
 
GR_PE_SIGNAL_H :=0

choc_rail :=0

choc_TCSP := 0